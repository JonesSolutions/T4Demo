<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter name="POCO" type="T4Demo.POCO" #>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace T4Demo
{
	class <#= this.POCO.ClassName #>
	{
		#region Variables
		<# foreach (T4Demo.POCO.Property current in this.POCO.Properties )
		{
		if (!current.Nullable)
		{
		switch (current.PropertyType)
		{
		case "bigint": #> 
		protected int64 _<#= current.PropertyName #>;
		<#	break;
		case "bit": #>
		protected boolean _<#= current.PropertyName #>;
		<#	break;
		case "char": #>
		protected char[]  _<#= current.PropertyName #>;
		<#	break;
		case "date": #>
		protected DateTime _<#= current.PropertyName #>;
		<#	break;
		case "datetime": #>
		protected DateTime _<#= current.PropertyName #>;
		<#	break;
		case "datetime2": #>
		protected DateTime _<#= current.PropertyName #>;
		<#	break;
		case "DATETIMEOFFSET": #>
		protected DateTimeOffset _<#= current.PropertyName #>;
		<#	break;
		case "decimal": #>
		protected decimal _<#= current.PropertyName #>;
		<#	break;
		case "float": #>
		protected double _<#= current.PropertyName #>;
		<#	break;
		case "int": #>
		protected int32 _<#= current.PropertyName #>;
		<#	break;
		case "money": #>
		protected decimal  _<#= current.PropertyName #>;	
		<#	break;
		case "nchar": #>
		protected chars[] _<#= current.PropertyName #>;
		<#	break;
		case "ntext": #>
		protected string  _<#= current.PropertyName #>;
		<#	break;
		case "numeric": #>
		protected decimal _<#= current.PropertyName #>;
		<#	break;
		case "nvarchar": #>
		protected string  _<#= current.PropertyName #>;
		<#	break;
		case "nvarchar(1)": #>
		protected char  _<#= current.PropertyName #>;
		<#	break;
		case "nchar(1)": #>
		protected Char _<#= current.PropertyName #>;
		<#	break;
		case "real": #>
		protected single _<#= current.PropertyName #>;
		<#	break;
		case "smallint": #>
		protected int16 _<#= current.PropertyName #>;
		<#	break;
		case "smallmoney": #>
		protected decimal _<#= current.PropertyName #>;
		<#	break;
		case "text": #>
		protected string _<#= current.PropertyName #>;
		<#	break;
		case "time": #>
		protected TimeSpan _<#= current.PropertyName #>;
		<#	break;
		case "tinyint": #>
		protected byte _<#= current.PropertyName #>;
		<#	break;
		case "uniqueidentifier": #>
		protected Guid _<#= current.PropertyName #>;
		<#	break;
		case "varbinary": #>
		protected byte[] _<#= current.PropertyName #>;
		<#	break;
		case "varbinary(1)": #>
		protected byte  _<#= current.PropertyName #>;
		<#	break;
		case "binary(1)": #>
		protected byte _<#= current.PropertyName #>;
		<#	break;
		case "varchar": #>
		protected string _<#= current.PropertyName #>;
		<#	break;
		case "xml": #>
		protected string  _<#= current.PropertyName #>;
		<#	break;
		default: #>
		protected object  _<#= current.PropertyName #>;
		<#	break; 
		}
		}
	
	}#>	
	#endregion
	#region Nullable Variables
	<# foreach (T4Demo.POCO.Property current in this.POCO.Properties )
	{ 
		if (current.Nullable)
		{
		switch (current.PropertyType)
		{
		case "bigint": #> 
		protected int64? _<#= current.PropertyName #>;
		<#	break;
		case "bit": #>
		protected boolean? _<#= current.PropertyName #>;
		<#	break;
		case "char": #>
		protected char[]?  _<#= current.PropertyName #>;
		<#	break;
		case "date": #>
		protected DateTime? _<#= current.PropertyName #>;
		<#	break;
		case "datetime": #>
		protected DateTime? _<#= current.PropertyName #>;
		<#	break;
		case "datetime2": #>
		protected DateTime? _<#= current.PropertyName #>;
		<#	break;
		case "DATETIMEOFFSET": #>
		protected DateTimeOffset? _<#= current.PropertyName #>;
		<#	break;
		case "decimal": #>
		protected decimal? _<#= current.PropertyName #>;
		<#	break;
		case "float": #>
		protected double? _<#= current.PropertyName #>;
		<#	break;
		case "int": #>
		protected int32? _<#= current.PropertyName #>;
		<#	break;
		case "money": #>
		protected decimal?  _<#= current.PropertyName #>;	
		<#	break;
		case "nchar": #>
		protected chars[]? _<#= current.PropertyName #>;
		<#	break;
		case "ntext": #>
		protected string?  _<#= current.PropertyName #>;
		<#	break;
		case "numeric": #>
		protected decimal? _<#= current.PropertyName #>;
		<#	break;
		case "nvarchar": #>
		protected string?  _<#= current.PropertyName #>;
		<#	break;
		case "nvarchar(1)?": #>
		protected char  _<#= current.PropertyName #>;
		<#	break;
		case "nchar(1)": #>
		protected Char? _<#= current.PropertyName #>;
		<#	break;
		case "real": #>
		protected single? _<#= current.PropertyName #>;
		<#	break;
		case "smallint": #>
		protected int16? _<#= current.PropertyName #>;
		<#	break;
		case "smallmoney": #>
		protected decimal? _<#= current.PropertyName #>;
		<#	break;
		case "text": #>
		protected string? _<#= current.PropertyName #>;
		<#	break;
		case "time": #>
		protected TimeSpan? _<#= current.PropertyName #>;
		<#	break;
		case "tinyint": #>
		protected byte? _<#= current.PropertyName #>;
		<#	break;
		case "uniqueidentifier": #>
		protected Guid? _<#= current.PropertyName #>;
		<#	break;
		case "varbinary": #>
		protected byte[]? _<#= current.PropertyName #>;
		<#	break;
		case "varbinary(1)": #>
		protected byte? _<#= current.PropertyName #>;
		<#	break;
		case "binary(1)": #>
		protected byte? _<#= current.PropertyName #>;
		<#	break;
		case "varchar": #>
		protected string? _<#= current.PropertyName #>;
		<#	break;
		case "xml": #>
		protected string? _<#= current.PropertyName #>;
		<#	break;
		default: #>
		protected object?  _<#= current.PropertyName #>;
		<#	break;
		}
		}
		}#>	
		#endregion

		#region Properties
		<# foreach (T4Demo.POCO.Property current in this.POCO.Properties )
		{ 
		if (!current.Nullable)
		{
		switch (current.PropertyType)
		{
 		case "bigint": #> 
		public int64 <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "bit": #>
		public boolean <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "char": #>
		public char[]  <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "date": #>
		public DateTime <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "datetime": #>
		public DateTime <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "datetime2": #>
		public DateTime <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "DATETIMEOFFSET": #>
		public DateTimeOffset <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "decimal": #>
		public decimal <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "float": #>
		public double <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "int": #>
		public int32 <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "money": #>
		public decimal  <#= current.PropertyName #>	
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "nchar": #>
		public chars[] <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "ntext": #>
		public string  <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "numeric": #>
		public decimal <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "nvarchar": #>
		public string  <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "nvarchar(1)": #>
		public char  <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "nchar(1)": #>
		public Char <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "real": #>
		public single <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "smallint": #>
		public int16 <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "smallmoney": #>
		public decimal <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "text": #>
		public string <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "time": #>
		public TimeSpan <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "tinyint": #>
		public byte <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "uniqueidentifier": #>
		public Guid <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "varbinary": #>
		public byte[] <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "varbinary(1)": #>
		public byte  <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "binary(1)": #>
		public byte <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "varchar": #>
		public string <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "xml": #>
		public string  <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# default: #>
		public object  <#= current.PropertyName #>
		{ 
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		}
		<# break; #>
		<# }
		}
	}#>	
	#endregion
	#region Nullable Properties
	<# foreach (T4Demo.POCO.Property current in this.POCO.Properties )
	{ 
		if (current.Nullable)
		{
		switch (current.PropertyType)
		{
 		case "bigint": #> 
		public int64? <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "bit": #>
		public boolean? <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "char": #>
		public char[]?  <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "date": #>
		public DateTime? <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "datetime": #>
		public DateTime? <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "datetime2": #>
		public DateTime? <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "DATETIMEOFFSET": #>
		public DateTimeOffset? <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "decimal": #>
		public decimal? <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "float": #>
		public double? <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "int": #>
		public int32? <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "money": #>
		public decimal?  <#= current.PropertyName #>	
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "nchar": #>
		public chars[]? <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "ntext": #>
		public string?  <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "numeric": #>
		public decimal? <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "nvarchar": #>
		public string?  <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "nvarchar(1)?": #>
		public char  <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "nchar(1)": #>
		public Char? <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "real": #>
		public single? <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "smallint": #>
		public int16? <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "smallmoney": #>
		public decimal? <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "text": #>
		public string? <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "time": #>
		public TimeSpan? <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "tinyint": #>
		public byte? <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "uniqueidentifier": #>
		public Guid? <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "varbinary": #>
		public byte[]? <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "varbinary(1)": #>
		public byte? <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "binary(1)": #>
		public byte? <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "varchar": #>
		public string? <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# case "xml": #>
		public string? <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		} 
		<# break; #>
		<# default: #>
		public object?  <#= current.PropertyName #>
		{
			get {return _<#= current.PropertyName #>;}
			set {_<#= current.PropertyName #> = value;}
		}
		<# break; #>
		<#}
		}
		}#>	
		#endregion
		}
}